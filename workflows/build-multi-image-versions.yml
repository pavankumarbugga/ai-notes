name: Build Windows Images

on:
  workflow_dispatch:
    inputs:
      windows_version:
        description: 'Windows version to build'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - '2019'
          - '2022'
      version_increment:
        description: 'Version increment type'
        required: false
        default: 'patch'
        type: choice
        options:
          - 'patch'
          - 'minor'
          - 'major'
  
  schedule:
    # Run weekly on Monday at 1:00 AM UTC
    - cron: '0 1 * * 1'

env:
  REGISTRY: ghcr.io
  BASE_IMAGE_NAME: ${{ github.repository }}/windows-image

jobs:
  set-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          if [[ "${{ github.event_name }}" == "schedule" || "${{ github.event.inputs.windows_version }}" == "all" ]]; then
            echo "matrix={\"windows_version\":[\"2019\",\"2022\"]}" >> $GITHUB_OUTPUT
          else
            echo "matrix={\"windows_version\":[\"${{ github.event.inputs.windows_version }}\"]}" >> $GITHUB_OUTPUT
          fi

  determine-versions:
    needs: set-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    outputs:
      new_version_${{ matrix.windows_version }}: ${{ steps.update-version.outputs.new_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Get current version
        id: get-version
        run: |
          if [ -f "versions/windows-${{ matrix.windows_version }}.txt" ]; then
            CURRENT_VERSION=$(cat "versions/windows-${{ matrix.windows_version }}.txt")
          else
            CURRENT_VERSION="1.0.0"
            mkdir -p versions
            echo "$CURRENT_VERSION" > "versions/windows-${{ matrix.windows_version }}.txt"
          fi
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Update version
        id: update-version
        run: |
          CURRENT_VERSION="${{ steps.get-version.outputs.current_version }}"
          
          # Set increment type based on trigger
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            INCREMENT_TYPE="patch"
          else
            INCREMENT_TYPE="${{ github.event.inputs.version_increment }}"
          fi
          
          # Parse current version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Increment version based on type
          if [[ "$INCREMENT_TYPE" == "major" ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "$INCREMENT_TYPE" == "minor" ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Update version file
          echo "$NEW_VERSION" > "versions/windows-${{ matrix.windows_version }}.txt"
      
      - name: Commit version update
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add versions/
          git commit -m "Update Windows ${{ matrix.windows_version }} version to ${{ steps.update-version.outputs.new_version }}"
          git push

  build-and-push:
    needs: [set-matrix, determine-versions]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Extract version for this Windows version
        id: extract-version
        run: |
          # Use a dynamic variable reference to grab the version specific to this matrix job
          VERSION_VAR="needs.determine-versions.outputs.new_version_${{ matrix.windows_version }}"
          VERSION="${!VERSION_VAR}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./windows-${{ matrix.windows_version }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-${{ matrix.windows_version }}:latest
            ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-${{ matrix.windows_version }}:${{ steps.extract-version.outputs.version }}
          build-args: |
            VERSION=${{ steps.extract-version.outputs.version }}

  notify:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check build status
        id: check
        run: |
          if [[ "${{ needs.build-and-push.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=Windows images were successfully built and pushed." >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=Failed to build Windows images. Check logs for details." >> $GITHUB_OUTPUT
          fi
          
      - name: Send notification
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[${process.env.STATUS}] Windows Image Build - ${new Date().toISOString().split('T')[0]}`,
              body: process.env.MESSAGE
            });
            console.log(`Created issue #${issue.data.number}`);
        env:
          STATUS: ${{ steps.check.outputs.status }}
          MESSAGE: ${{ steps.check.outputs.message }}
